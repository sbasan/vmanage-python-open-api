"""
    Cisco SD-WAN vManage API

    The vManage API exposes the functionality of operations maintaining devices and the overlay network  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: vmanage@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)


class NWPIApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_agg_flow_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/aggFlow',
                'operation_id': 'get_agg_flow',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                    'trace_state',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                    'trace_state',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                    'trace_state':
                        (str,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                    'trace_state': 'traceState',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                    'trace_state': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_app_qos_data_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/appQosData',
                'operation_id': 'get_app_qos_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                    'received_timestamp',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                    'received_timestamp',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                    'received_timestamp':
                        (int,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                    'received_timestamp': 'receivedTimestamp',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                    'received_timestamp': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_app_qos_state_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/appQosState',
                'operation_id': 'get_app_qos_state',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                    'trace_state',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                    'trace_state',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                    'trace_state':
                        (str,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                    'trace_state': 'traceState',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                    'trace_state': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_concurrent_data_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/concurrentData',
                'operation_id': 'get_concurrent_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_concurrent_domain_data_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/concurrentDomainData',
                'operation_id': 'get_concurrent_domain_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_event_app_hop_list_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/eventAppHopList',
                'operation_id': 'get_event_app_hop_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                    'state',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                    'state',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                    'state':
                        (str,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                    'state': 'state',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                    'state': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_event_app_score_bandwidth_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/eventAppScoreBandwidth',
                'operation_id': 'get_event_app_score_bandwidth',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                    'state',
                    'received_timestamp',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                    'state',
                    'received_timestamp',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                    'state':
                        (str,),
                    'received_timestamp':
                        (int,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                    'state': 'state',
                    'received_timestamp': 'receivedTimestamp',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                    'state': 'query',
                    'received_timestamp': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_event_flow_from_app_hop_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/eventFlowFromAppHop',
                'operation_id': 'get_event_flow_from_app_hop',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                    'state',
                    'application',
                    'direction',
                    '_from',
                    'to',
                    'device_trace_id',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                    'state',
                    'application',
                    'direction',
                    '_from',
                    'to',
                    'device_trace_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                    'state':
                        (str,),
                    'application':
                        (str,),
                    'direction':
                        (str,),
                    '_from':
                        (str,),
                    'to':
                        (str,),
                    'device_trace_id':
                        (int,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                    'state': 'state',
                    'application': 'application',
                    'direction': 'direction',
                    '_from': 'from',
                    'to': 'to',
                    'device_trace_id': 'deviceTraceId',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                    'state': 'query',
                    'application': 'query',
                    'direction': 'query',
                    '_from': 'query',
                    'to': 'query',
                    'device_trace_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_event_readout_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/eventReadout',
                'operation_id': 'get_event_readout',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                    'state',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                    'state',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                    'state':
                        (str,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                    'state': 'state',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                    'state': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_routing_detail_from_local_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/stream/device/nwpi/routingDetail',
                'operation_id': 'get_routing_detail_from_local',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'trace_id',
                    'timestamp',
                    'trace_state',
                    'route_prefixs',
                ],
                'required': [
                    'trace_id',
                    'timestamp',
                    'trace_state',
                    'route_prefixs',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trace_id':
                        (int,),
                    'timestamp':
                        (int,),
                    'trace_state':
                        (str,),
                    'route_prefixs':
                        (str,),
                },
                'attribute_map': {
                    'trace_id': 'traceId',
                    'timestamp': 'timestamp',
                    'trace_state': 'traceState',
                    'route_prefixs': 'routePrefixs',
                },
                'location_map': {
                    'trace_id': 'query',
                    'timestamp': 'query',
                    'trace_state': 'query',
                    'route_prefixs': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_agg_flow(
        self,
        trace_id,
        timestamp,
        trace_state,
        **kwargs
    ):
        """get_agg_flow  # noqa: E501

        Get aggregated flow data for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_agg_flow(trace_id, timestamp, trace_state, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time
            trace_state (str): trace state

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        kwargs['trace_state'] = \
            trace_state
        return self.get_agg_flow_endpoint.call_with_http_info(**kwargs)

    def get_app_qos_data(
        self,
        trace_id,
        timestamp,
        received_timestamp,
        **kwargs
    ):
        """get_app_qos_data  # noqa: E501

        Get QoS Application data for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_qos_data(trace_id, timestamp, received_timestamp, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time
            received_timestamp (int): received timestamp

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        kwargs['received_timestamp'] = \
            received_timestamp
        return self.get_app_qos_data_endpoint.call_with_http_info(**kwargs)

    def get_app_qos_state(
        self,
        trace_id,
        timestamp,
        trace_state,
        **kwargs
    ):
        """get_app_qos_state  # noqa: E501

        Get QoS Application state to received timestamp mapping for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_qos_state(trace_id, timestamp, trace_state, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time
            trace_state (str): trace state

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        kwargs['trace_state'] = \
            trace_state
        return self.get_app_qos_state_endpoint.call_with_http_info(**kwargs)

    def get_concurrent_data(
        self,
        trace_id,
        timestamp,
        **kwargs
    ):
        """get_concurrent_data  # noqa: E501

        Get concurrent data for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_concurrent_data(trace_id, timestamp, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        return self.get_concurrent_data_endpoint.call_with_http_info(**kwargs)

    def get_concurrent_domain_data(
        self,
        trace_id,
        timestamp,
        **kwargs
    ):
        """get_concurrent_domain_data  # noqa: E501

        Get concurrent domain data for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_concurrent_domain_data(trace_id, timestamp, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        return self.get_concurrent_domain_data_endpoint.call_with_http_info(**kwargs)

    def get_event_app_hop_list(
        self,
        trace_id,
        timestamp,
        state,
        **kwargs
    ):
        """get_event_app_hop_list  # noqa: E501

        Get Trace Application and HopList for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_event_app_hop_list(trace_id, timestamp, state, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time
            state (str): trace state

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        kwargs['state'] = \
            state
        return self.get_event_app_hop_list_endpoint.call_with_http_info(**kwargs)

    def get_event_app_score_bandwidth(
        self,
        trace_id,
        timestamp,
        state,
        received_timestamp,
        **kwargs
    ):
        """get_event_app_score_bandwidth  # noqa: E501

        Get Trace Event Application Performance Score and Bandwidth for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_event_app_score_bandwidth(trace_id, timestamp, state, received_timestamp, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time
            state (str): trace state
            received_timestamp (int): received timestamp

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        kwargs['state'] = \
            state
        kwargs['received_timestamp'] = \
            received_timestamp
        return self.get_event_app_score_bandwidth_endpoint.call_with_http_info(**kwargs)

    def get_event_flow_from_app_hop(
        self,
        trace_id,
        timestamp,
        state,
        application,
        direction,
        _from,
        to,
        device_trace_id,
        **kwargs
    ):
        """get_event_flow_from_app_hop  # noqa: E501

        Get Trace Event Flow From Application And Hop for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_event_flow_from_app_hop(trace_id, timestamp, state, application, direction, _from, to, device_trace_id, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time
            state (str): trace state
            application (str): app name
            direction (str): direction
            _from (str): from
            to (str): to
            device_trace_id (int): deviceTraceId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        kwargs['state'] = \
            state
        kwargs['application'] = \
            application
        kwargs['direction'] = \
            direction
        kwargs['_from'] = \
            _from
        kwargs['to'] = \
            to
        kwargs['device_trace_id'] = \
            device_trace_id
        return self.get_event_flow_from_app_hop_endpoint.call_with_http_info(**kwargs)

    def get_event_readout(
        self,
        trace_id,
        timestamp,
        state,
        **kwargs
    ):
        """get_event_readout  # noqa: E501

        Get Trace Event Readout for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_event_readout(trace_id, timestamp, state, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time
            state (str): trace state

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        kwargs['state'] = \
            state
        return self.get_event_readout_endpoint.call_with_http_info(**kwargs)

    def get_routing_detail_from_local(
        self,
        trace_id,
        timestamp,
        trace_state,
        route_prefixs,
        **kwargs
    ):
        """get_routing_detail_from_local  # noqa: E501

        Get Routing Details for NWPI.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_routing_detail_from_local(trace_id, timestamp, trace_state, route_prefixs, async_req=True)
        >>> result = thread.get()

        Args:
            trace_id (int): trace id
            timestamp (int): start time
            trace_state (str): trace state
            route_prefixs (str): route prefixs

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['trace_id'] = \
            trace_id
        kwargs['timestamp'] = \
            timestamp
        kwargs['trace_state'] = \
            trace_state
        kwargs['route_prefixs'] = \
            route_prefixs
        return self.get_routing_detail_from_local_endpoint.call_with_http_info(**kwargs)

